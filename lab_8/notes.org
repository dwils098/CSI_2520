#+TITLE: CSI-2520 -- Tut and Lab 8

* Tutorial
** Problems

Given a list, compress it using 'run-length encoding' technique. This technique consists
of representing a sequence of consecutive identical elements by a pair of values: (N V),
where N is the number of consecutive occurrences and V is the value that is repeated.  

#+BEGIN_SRC scheme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exemple:
; * (encode '((a a a a) (b) (c c) (a a) (d) (e e e e)))
; ((4 a) (1 b) (2 c) (2 a) (1 d)(4 e))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (encode liste)
  (define (encode-helper packed-list)
    ; if the list is null simply return it.
    (if (null? packed-list)
        ‘()
        ; else construct a list containing the N first followed by the V of the sublist
        (cons (list (length (car packed-list))
                    (caar packed-list))
              (encode-helper (cdr packed-list)))))
  (encode-helper liste))

;(encode '((a a a a) (b) (c c) (a a) (d) (e e e e)))

#+END_SRC


Using the result from the previous function, make the elements that are not duplicated
simply the element rather than (1 elt).

#+BEGIN_SRC scheme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exemple:
; *(encode-modified ‘((a a a a) (b) (c c) (a a) (d) (e e e e)))  
; ((4 a) b (2 c) (2 a) d (4 e))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (encode-modified liste)
  (define (simplify encoded-list)
     ;if list is null  return empty list
     (if (null? encoded-list)
        '()
        ; else if N = 1, then construct a list with the second elt of the first sub-list
        (cons (if (= 1 (caar encoded-list))
                  (cadar encoded-list)
                  ; else do nothing and return the sublist (N V) 
                  (car encoded-list))
              ; call recursively with cdr of list
              (simplify (cdr encoded-list)))))
  
  (simplify (encode liste)))

;(encode-modified ‘((a a a a) (b) (c c) (a a) (d) (e e e e)))
#+END_SRC


Using the previous result re-construct the original list.

#+BEGIN_SRC scheme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Example: 
; (decode-rl (encode-modified '((a a a a) (b) (c c) (a a) (d) (e e e e))))
; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (decode-rl encoded-list)
  ; intermediate function that takes an elt and a count (V N)
  (define (expand element count)
    
    ; if count is 0 return empty list 
    (if (= count 0)
        ‘()

        ; else construct a list from the elt and call recursively + decr. count 
        (cons element
              (expand element (- count 1)))))

  ; if encoded-list is null return empty list 
  (cond ((null? encoded-list) ‘())
        ; if first sublist is not a list 
        ((not (list? (car encoded-list)))
         ; make a list out of it and append it to the result of the recursive call 
         (append (list (car encoded-list))
                 (decode-rl (cdr encoded-list))))
        ; else expand the pair (N V) and append it to the result of the  recursive call 
        (else (append (expand (cadar encoded-list)
                              (caar encoded-list))
                      (decode-rl (cdr encoded-list))))))

;(decode-rl (encode-modified ‘(a a a a b c c a a d e e e e)))

#+END_SRC


Direct implementation of run-length encoding, given a simple list (not list of lists)
return its encoded value.

#+BEGIN_SRC scheme
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Example:
; * (encode-direct ‘(a a a a b c c a a d e e e e))
; ((4 a) b (2 c) (2 a) d (4 e))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (encode-direct list-to-encode)
  ; intermediate function that takes 
  (define (simplify liste)
    (if (null? liste)
        ‘()
        ; else cons a list if N = 1 then use V, else use (N V); with the result of the recursive call
        (cons (if (= 1 (caar liste))
                  (cadar liste)
                  (car liste))
              (simplify (cdr liste)))))

  (define (encode-direct-helper liste)
     ;trivial case
     (if (null? liste)
        ‘()
        ; else define encoded-cdr as the result of the recursive call with the cdr of the list
        (let ((encoded-cdr (encode-direct-helper (cdr liste))))
          ; verify if encoded-cdr is empty, if so create a list of 1 elt 
          (cond ((null? encoded-cdr) (list (list 1
                                                 (car liste))))
                ; verify if the following elt is repeated if so increment N
                ((equal? (car liste)
                         (cadar encoded-cdr))
                 ; increment N and add it to the encoded-cdr
                 (cons (list (+ 1 (caar encoded-cdr))
                             (car liste))
                       (cdr encoded-cdr)))
                ; else create a liste containing 1 element and add it to the encoded-cdr
                (else (cons (list 1
                                  (car liste))
                            encoded-cdr))))))
  (simplify (encode-direct-helper list-to-encode)))

;(encode-direct ‘(a a a a b c c a a d e e e e))

#+END_SRC

* Lab 

** Fibonacci

Which implementation is the most efficient in terms of recursion... (Tail-recursion)

#+BEGIN_SRC scheme

; Fibonacci Option 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define fibonacci
  (lambda (n)
    (if (= n 0)
        0
        ; initialize i=n a1= 1 a2=0
        (let fib ((i n) (a1 1) (a2 0))
          (display "fib")
          (display (list i a1 a2))
          (newline)
          ; if i = 1, return 1 else call recursively
          (if (= i 1)
              a1
              (fib (- i 1) (+ a1 a2) a1))))
  )
)



; RESULT
> (fibonacci 5)
fib(5 1 0)
fib(4 1 1)
fib(3 2 1)
fib(2 3 2)
fib(1 5 3)
5

; Fibonacci Option 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define fibonacci2
  (lambda (n)
    (let fib ((i n))
          (display "fib")
          (display (list i))
          (newline)
      (cond
        ((= i 0) 0)
        ((= i 1) 1)
        (else (+ (fib (- i 1)) (fib (- i 2)))))))) 

;RESULT 
> (fibonacci2 5)
fib(5)
fib(4)
fib(3)
fib(2)
fib(1)
fib(0)
fib(1)
fib(2)
fib(1)
fib(0)
fib(3)
fib(2)
fib(1)
fib(0)
fib(1)
5

#+END_SRC


Exercise 2: Insertion Sort on a Vector

Implement insertion sort for a vector. 
(See Wikipedia if you need a reminder how insertion sort works.)
Implement the function with the comparator as an additional argument.

#+BEGIN_SRC scheme

(define insertsort
  (lambda (v oper)
    (let ((n (vector-length v)))
        (do ((i 0 (+ i 1)) 
             (ls '() (insert-element ls (vector-ref v i) oper)))
            ((= i n) (list->vector ls))
         )
    )
  )
)

(define (insert-element L element oper)
  (if (null? L)
      (list element)
      (if (oper element (car L))
          (cons element L)
          (cons (car L) (insert-element (cdr L) element oper))
      )
  )
)



#+END_SRC
